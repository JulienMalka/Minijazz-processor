clone_bit<n>(a) = b:[n] where
if n = 0 then b = [];
else
b = a . clone_bit<n-1>(a);
end if
end where

xor_sig<n>(a:[n], b:[n]) = c:[n] where
if n = 0 then c = [];
else
c = (a[0] xor b[0]) . xor_sig<n-1>(a[1..], b[1..])
end if
end where

not_sig<n>(a:[n]) = c:[n] where
if n = 0 then c = [];
else
c = not a[0] . not_sig<n-1>(a[1..])
end if
end where

and_sig<n>(a:[n], b:[n]) = c:[n] where
if n = 0 then c = [];
else
c = (a[0] and b[0]) . and_sig<n-1>(a[1..], b[1..])
end if
end where

or_sig<n>(a:[n], b:[n]) = c:[n] where
if n = 0 then c = [];
else
c = (a[0] or b[0]) . or_sig<n-1>(a[1..], b[1..])
end if
end where

fulladder(a,b,c) = (s, r) where
  s = (a xor b) xor c;
  r = (a and b) or ((a xor b) and c);
end where


adder<n>(a:[n], b:[n], c_in) = (o:[n], c_out) where
if n=0 then
o=[];
c_out = 0
else
(s_n1, c_n1) = adder<n-1>(a[1..], b[1..], c_in);
(s_n, c_out) = fulladder(a[0], b[0], c_n1);
o = s_n . s_n1
end if
end where

is_zero<n>(a:[n], acc) = res where
if n = o then
res = acc;
else
new_acc = acc or a[0];
res = is_zero<n-1>(a[1..], new_acc);
end if
end where



add_sub(a:[32], b:[32], sub_mode) = (carry, zero, r:[32]) where
s = clone_bit<32>(sub_mode);
b_s = xor_sig<32>(b, s);
(temp, c) = adder<33>(0.a, 0.b_s, 0);
zero_sig = clone_bit<32>(0);
(result, c) = adder<33>(temp, zero_sig . sub_mode, 0);
carry = result[32];
r = result[0..31];
zero = is_zero<32>(r, 0);
end where

muxn<n>(a,b:[n],c:[n]) = o:[n] where
  if n = 0
    then o = []
    else o = mux(a,b[0],c[0]).muxn<n-1>(a,b[1..],c[1..])
  end if
end where

mux3bit<n>(a:[n], b:[n], c:[n], d:[n], e:[n], f:[n], g:[n], h:[n], sel:[3]) = res:[n] where
r1_1 = muxn<n>(sel[0], a, b);
r1_2 = muxn<n>(sel[0], c, d);
r1_3 = muxn<n>(sel[0], e, g);
r1_4 = muxn<n>(sel[0], g, h);
r2_1 = muxn<n>(sel[1], r1_1, r1_2);
r2_2 = muxn<n>(sel[1], r1_3, r1_4);
res = muxn<n>(sel[2], r2_1, r2_2);
end where

mux5bit<n>(a:[n], b:[n], c:[n], d:[n], e:[n], f:[n], g:[n], h:[n], sel:[3]) = res:[n] where


mux2bit<n>(a:[n], b:[n], c:[n], d:[n], sel:[2]) = res:[n] where
r1_1 = muxn<n>(sel[0], a, b);
r1_2 = muxn<n>(sel[0], c, d);
res = muxn<n>(sel[1], r1_1, r1_2);
end where


comparator(a_31, b_31, diff_31, carry, zero, op:[3]) = r where
val_1 = (((not a_31) and b_31 )or ((not diff_31) and ((not a_31) xor b_31)));
val_2 = ((a_31 and (not b_31) )or (diff_31 and ((not a_31) xor b_31)));
r = mux3bit<1>(zero, val_1, val_2, not zero, zero, carry, not carry, zero, op);
end where


logic_unit(a:[32], b:[32], op:[2]) = r:[32] where
val_1 = not_sig<32>(or_sig<32>(a, b));
val_2 = and_sig<32>(a, b);
val_3 = or_sig<32>(a, b);
val_4 = xor_sig<32>(a, b);
r = mux2bit<32>(val_1, val_2, val_3, val_4, op);
end where






main(a:[32], b:[32]) = c:[32] where
c = xor_sig<32>(a,b)

end where
